<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BlitzBlog</title>
    <link>https://davidblitz.github.io/</link>
    <description>Recent content on BlitzBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>davidblitz</copyright>
    <lastBuildDate>Tue, 31 May 2022 00:00:29 +0100</lastBuildDate><atom:link href="https://davidblitz.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Uniformly Drawing from A Set Of Connected Graphs Without Knowing The Whole Set</title>
      <link>https://davidblitz.github.io/2022/05/31/2022-05-31-graph-mcmc/</link>
      <pubDate>Tue, 31 May 2022 00:00:29 +0100</pubDate>
      
      <guid>https://davidblitz.github.io/2022/05/31/2022-05-31-graph-mcmc/</guid>
      <description>The Problem Imagine wanting to empirically compute a statistic on connected graphs. The set of non-isomorphic connected graphs on a given number of nodes becomes huge very quickly. This is visualized in the following plot with logarithmic y-axis:
This is why computing your statistic for every possible graph becomes quickly infeasible and you might want to resort to random sampling instead. Unfortunately, at least my favorite python package for graphs, networkx, does not provide any method to uniformly sample from the set of connected graphs with $n$ nodes.</description>
    </item>
    
    <item>
      <title>A Conjecture on Bohemian Matrices</title>
      <link>https://davidblitz.github.io/2021/12/29/2021-12-29-bohemian-matrices/</link>
      <pubDate>Wed, 29 Dec 2021 11:00:29 +0100</pubDate>
      
      <guid>https://davidblitz.github.io/2021/12/29/2021-12-29-bohemian-matrices/</guid>
      <description>In the past year, I found a short elementary proof of Conjecture 6 on this website on bohemian matrices which is currently still marked as &amp;ldquo;open&amp;rdquo;.
Bohemian matrices are just matrices with all entries being integers.
The conjecture states that the number \( a(n) \) of nilpotent matrices with entries in \(\{ 0, 1, 2 \} \) and of dimension \(n \times n \) is equal to the definition of the sequence A188457 of the OEIS.</description>
    </item>
    
    <item>
      <title>The Power Transform of Graphs</title>
      <link>https://davidblitz.github.io/2020/07/03/2020-01-02-power-transform/</link>
      <pubDate>Fri, 03 Jul 2020 16:00:29 +0100</pubDate>
      
      <guid>https://davidblitz.github.io/2020/07/03/2020-01-02-power-transform/</guid>
      <description>Motivation We&amp;rsquo;ve seen in a previous post, that it would be desirable to have isometries between a given graph to some \( N \) dimensional euclidean space. We also saw that this is in general impossible - even for very simple graphs.
In this post, we are going to explore a simple fix for that, which consists in transforming the metric of the graph in an invertible way before looking for an isometry.</description>
    </item>
    
    <item>
      <title>Euclidean Isometries of Graphs</title>
      <link>https://davidblitz.github.io/2019/12/25/2019-12-25-euclidean-embeddings/</link>
      <pubDate>Wed, 25 Dec 2019 16:00:29 +0100</pubDate>
      
      <guid>https://davidblitz.github.io/2019/12/25/2019-12-25-euclidean-embeddings/</guid>
      <description>Motivation Last year, I became interested in (approximate) isometric embeddings of graphs with the path distance metric into metric spaces whose elements can be represented by coordinates - like \(N \)-dimensional euclidean space , \( \mathbb{E}^N \).
Let&amp;rsquo;s consider an isometric mapping from a graph with a path distance metric to \(N\)-dimensional euclidean space for instance: \( f: G \rightarrow \mathbb{E}^N \). Isometric means that the distances between each two vertices \(v, w \in G\) is preserved by \(f\), i.</description>
    </item>
    
    <item>
      <title>One-Liners in Python - Linear Regression Plot</title>
      <link>https://davidblitz.github.io/2016/10/07/2016-10-07-linear-regression/</link>
      <pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://davidblitz.github.io/2016/10/07/2016-10-07-linear-regression/</guid>
      <description>When I was showing a friend the advantages of python over Excel/LibreCalc, I remembered the truly beautiful Seaborn Library which produces plots like the following.
As one can see, this a standard scatterplot of a two dimensional dataset together with a regression line fitted to it - the light blue shade indicates a 95% confidence interval btw. It turns out that creating this standard diagram is as easy as
import pandas as pd import seaborn as sns .</description>
    </item>
    
    <item>
      <title>Do it like a Bankster - Rounding</title>
      <link>https://davidblitz.github.io/2016/08/09/2016-08-09-bankers-rounding/</link>
      <pubDate>Tue, 09 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://davidblitz.github.io/2016/08/09/2016-08-09-bankers-rounding/</guid>
      <description>Let&amp;rsquo;s talk about rounding! I challenge you to type in the following in a Python3 REPL and not be surprised:
round(41.5) round(42.5) &amp;hellip; I thought so!
In the following, I wanna first give an intuitive explanation of this so called &amp;ldquo;Banker&amp;rsquo;s Rounding&amp;rdquo; method and then give some examples where this Rounding Method is of some use.
An Intuitive Explanation As you might have guessed, Banker&amp;rsquo;s Rounding always rounds a real number r to the next even number whenever there is two equally distant integers a, a+1 next to r, i.</description>
    </item>
    
    <item>
      <title>For-Expressions in Scala</title>
      <link>https://davidblitz.github.io/2016/08/01/2016-08-01-for-expressions/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://davidblitz.github.io/2016/08/01/2016-08-01-for-expressions/</guid>
      <description>In my opinion, the for-keyword in Scala stands out among its analogues in other programming languages. This is, because it translates each so called generator in the brackets following the for-keyword into a function call and doesn&amp;rsquo;t technically loop through some body. This being said, we are going to discuss first the, in my opinion, misnamed for-loops.
For-Loops Let&amp;rsquo;s consider the simple expression
for( x &amp;lt;- list) println(x) this will be translated by the Scala compiler to</description>
    </item>
    
    <item>
      <title>One Liners in Scala - The Sieve of Erastothenes</title>
      <link>https://davidblitz.github.io/2016/07/17/2016-07-17-erastothenes-sieve/</link>
      <pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://davidblitz.github.io/2016/07/17/2016-07-17-erastothenes-sieve/</guid>
      <description>It turns out that you can implement the core of Erastothenes&amp;rsquo; Sieve in one line of Scala code:
def sieve(stream: Stream[Int]): Stream[Int] =  stream.head #:: sieve(stream.tail.filter(k =&amp;gt; k%sieve.head != 0)) (btw the #:: sign is for prepending an element to a Stream[T] object)
Now, I cheated a bit and you still have to call the sieve function with a stream of all Int&amp;rsquo;s &amp;gt; 1. But this is not verbose at all:</description>
    </item>
    
    <item>
      <title>The Visitor Pattern</title>
      <link>https://davidblitz.github.io/2016/07/03/2016-07-03-visitor-pattern/</link>
      <pubDate>Sun, 03 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://davidblitz.github.io/2016/07/03/2016-07-03-visitor-pattern/</guid>
      <description>So recently, I came across the visitor pattern. As I learned, it is a way to extend an object with methods after the class of said object has been compiled. Or more fundamentally, as Wikipedia puts it -
 [it is] a way of separating an algorithm from an object structure on which it operates.
 A visitor basically walks through (visits) all or just part of the memberfields of an object and then through the memberfields of the memberfields and so on.</description>
    </item>
    
  </channel>
</rss>
